/*引入*/
@import "lapp";

/*变量*/
//变量
@background-color: #laba9c;
@width: 50px;

//变量 selector
@selector-header: header;

//变量 属性
@property: color;

//变量 url
@imgs: "../apache-tomcat-8.5.34/webapps/h5/wechatGp/img";

.@{selector-header}{
    width: @width;
    height: 300px;
    @{property}: pink;
    background: url("@{imgs}/icon.png");
}

/*嵌套和继承*/
.container{
    width: 500px;

    .content{
        height: 400px;

        .left{
            width: 100px;
            color: blue;
            text-align: center;
            &:after{
                content: "aaa";
            }
        }

        .right{
            &:extend(.container .content .left);  //继承，&：当前作用域的上级（即.right）,继承.left的样式
            height: 50px;
        }
    }
}

.top{
    width: 100%;
    height: 30px;
}
.foot{
    &:extend(.top);
}

/*混入指令*/
ul{
    li{
        a{
            text-decoration: none;
            .my-hover;   //带选择器属性的混入
        }

        .right{
            .common;
            .border-radius();
        }

        .left{
            .common;
            .border-radius(10px);
            .box-shadow(2px, 10px)
        }
    }
}

//加上小括号（虚拟类）不会被编译到css中
.my-hover(){
    &:hover{
        cursor: pointer;
    }
}
.common{
    width: 50%;
    color: blue;
}
.border-radius(@ra: 5px){
    border-radius: @ra;
    -moz-border-radius: @ra;
    -webkit-border-radius: @ra;
}

//@arguments:括号里的所有参数
.box-shadow(@x:0, @y:0, @blur:1px, @color:#000){
    box-shadow: @arguments;
    -moz-box-shadow: @arguments;
    -webkit-box-shadow: @arguments;
}

/*运算*/
@color: #888/2;

.page{
    width: @width*4;
    border: 1px+2 solid #eee;
    /*color: @color;*/
    .block(@color);

    .loop-content(4);
}

//循环
.loop-content(@n, @i:1) when (@i <= @n){
    .content@{i}{
        width: (@i * 100% / @n);
    }

    .loop-content(@n, (@i+1));
}

/*函数（less内置函数）*/

.block(@n) when (iscolor(@n)){   //iscolor函数，其它内置函数查看官方文档
    color: @n;
}